

cmake_minimum_required(VERSION 2.8.11)

enable_testing()

# add a dummy target for all autogenerated tests, so we can build them all
# even though they are EXCLUDE_FROMALL'd, if you use custom CMakeLists you can
# add a dependency of this target on your test programs, by adding:
# add_dependencies(all_tests your_test_name)
add_custom_target(all_tests)


# always use the CMAKE_MODULE_PATH-provided .cmake files, even when including
# from system directories:
cmake_policy(SET CMP0017 OLD)

# toolchain file for mcc-linux-x86
set(CMAKE_TOOLCHAIN_FILE "${CMAKE_SOURCE_DIR}/../../build/mcc-linux-x86/toolchain.cmake")

# provide function for post-processing executables
function (edge_postprocess_target target_type_ target_name_)
    if(COMMAND edge_apply_target_rules)
        edge_apply_target_rules(${target_type_} ${target_name_})
    endif()

    # For backwards compatibility, support MBED_EDGE_BUILD_POSTPROCESS_COMMAND.
    if(DEFINED MBED_EDGE_BUILD_POSTPROCESS_COMMAND AND ${target_type_} STREQUAL "EXECUTABLE")
        #message(AUTHOR_WARNING "This target defines a MBED_EDGE_BUILD_POSTPROCESS_COMMAND for which support has been deprecated. Please define a CMake function edge_apply_target_rules(build_object_type build_object) instead.")
        string(REPLACE MBED_EDGE_BUILD_CURRENT_EXE_NAME "${target_name_}" LOCAL_POSTPROCESS_COMMAND "${MBED_EDGE_BUILD_POSTPROCESS_COMMAND}")
        separate_arguments(LOCAL_POSTPROCESS_COMMAND_SEPARATED UNIX_COMMAND ${LOCAL_POSTPROCESS_COMMAND})
        add_custom_command(
            TARGET ${target_name_}
            POST_BUILD
            COMMAND ${LOCAL_POSTPROCESS_COMMAND_SEPARATED}
        )
    endif()
endfunction()

# set target-defined definitions
set(MBED_EDGE_BUILD_BUILD_YEAR "2018") # UTC year
set(MBED_EDGE_BUILD_BUILD_MONTH "4") # UTC month 1-12
set(MBED_EDGE_BUILD_BUILD_DAY "27") # UTC day 1-31
set(MBED_EDGE_BUILD_BUILD_HOUR "6") # UTC hour 0-24
set(MBED_EDGE_BUILD_BUILD_MINUTE "28") # UTC minute 0-59
set(MBED_EDGE_BUILD_BUILD_SECOND "41") # UTC second 0-61
set(MBED_EDGE_BUILD_BUILD_UUID "2c91ff27-2bd1-4f4c-90fb-20333b7b1f1d") # unique random UUID for each build
set(MBED_EDGE_BUILD_BUILD_VCS_ID "fde55f68a50d9a9f6378e1bd5bc299efbb355b9a") # git or mercurial hash
set(MBED_EDGE_BUILD_BUILD_VCS_CLEAN "1") # evaluates true if the version control system was clean, otherwise false
set(MBED_EDGE_BUILD_BUILD_VCS_DESCRIPTION "0.4.5") # git describe or mercurial equivalent
set(TARGET MCC_LINUX_X86)
set(TARGET_LIKE_MCC_LINUX_X86 TRUE)
set(MBED_EDGE_BUILD_BUILD_INFO_HEADER "${CMAKE_SOURCE_DIR}/../../build/mcc-linux-x86/mbed_edge_build_info")
set(TARGET_LIKE_MCC_LINUX_X86 TRUE)
set(TARGET_LIKE_LINUX TRUE)
set(TARGET_LIKE_NATIVE TRUE)
set(TARGET_LIKE_POSIX TRUE)
set(TARGET_LIKE_USERLAND TRUE)
set(TARGET_LIKE_X86 TRUE)
set(TARGET_LIKE_X86_64 TRUE)
set(MBED_EDGE_BUILD_CFG TRUE)
set(MBED_EDGE_BUILD_CONFIG_MERGED_JSON_FILE "${CMAKE_SOURCE_DIR}/../../build/mcc-linux-x86/mbed_edge_config.json")


project(mbed-edge-internal)

# Definitions provided by the target configuration info:
if(NOT DEFINED MBED_EDGE_BUILD_FORCE_INCLUDE_FLAG)
    # backwards-compatibility hack for ARMCC only: Do not add new compilers here!
    if("${CMAKE_C_COMPILER_ID}" STREQUAL "ARMCC")
        set(MBED_EDGE_BUILD_FORCE_INCLUDE_FLAG "--preinclude")
    else()
        set(MBED_EDGE_BUILD_FORCE_INCLUDE_FLAG "-include")
    endif()
endif()
add_definitions("${MBED_EDGE_BUILD_FORCE_INCLUDE_FLAG} \"${CMAKE_SOURCE_DIR}/../../build/mcc-linux-x86/mbed_edge_config.h\"")

# include root directories of all components we depend on (directly and
# indirectly, including ourself)
include_directories("${CMAKE_SOURCE_DIR}/../..")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/mbed-cloud-client")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/factory-configurator-client")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/pal")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/update-client-hub")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/mbed-coap")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/nanostack-randlib")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/mbed-trace")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/ns-hal-pal")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/sal-stack-nanostack-eventloop")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/secsrv-cbor")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/mbed-client-esfs")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/mbedtls")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/nanostack-libservice")


# recurse into dependencies that aren't built elsewhere
add_subdirectory(
   "${CMAKE_SOURCE_DIR}/../../build/mcc-linux-x86/mbed-edge-modules/mbed-cloud-client"
   "${CMAKE_BINARY_DIR}/mbed-edge-modules/mbed-cloud-client"
)
add_subdirectory(
   "${CMAKE_SOURCE_DIR}/../../build/mcc-linux-x86/mbed-edge-modules/factory-configurator-client"
   "${CMAKE_BINARY_DIR}/mbed-edge-modules/factory-configurator-client"
)
add_subdirectory(
   "${CMAKE_SOURCE_DIR}/../../build/mcc-linux-x86/mbed-edge-modules/pal"
   "${CMAKE_BINARY_DIR}/mbed-edge-modules/pal"
)
add_subdirectory(
   "${CMAKE_SOURCE_DIR}/../../build/mcc-linux-x86/mbed-edge-modules/update-client-hub"
   "${CMAKE_BINARY_DIR}/mbed-edge-modules/update-client-hub"
)
add_subdirectory(
   "${CMAKE_SOURCE_DIR}/../../build/mcc-linux-x86/mbed-edge-modules/mbed-coap"
   "${CMAKE_BINARY_DIR}/mbed-edge-modules/mbed-coap"
)
add_subdirectory(
   "${CMAKE_SOURCE_DIR}/../../build/mcc-linux-x86/mbed-edge-modules/nanostack-randlib"
   "${CMAKE_BINARY_DIR}/mbed-edge-modules/nanostack-randlib"
)
add_subdirectory(
   "${CMAKE_SOURCE_DIR}/../../build/mcc-linux-x86/mbed-edge-modules/mbed-trace"
   "${CMAKE_BINARY_DIR}/mbed-edge-modules/mbed-trace"
)
add_subdirectory(
   "${CMAKE_SOURCE_DIR}/../../build/mcc-linux-x86/mbed-edge-modules/ns-hal-pal"
   "${CMAKE_BINARY_DIR}/mbed-edge-modules/ns-hal-pal"
)
add_subdirectory(
   "${CMAKE_SOURCE_DIR}/../../build/mcc-linux-x86/mbed-edge-modules/sal-stack-nanostack-eventloop"
   "${CMAKE_BINARY_DIR}/mbed-edge-modules/sal-stack-nanostack-eventloop"
)
add_subdirectory(
   "${CMAKE_SOURCE_DIR}/../../build/mcc-linux-x86/mbed-edge-modules/secsrv-cbor"
   "${CMAKE_BINARY_DIR}/mbed-edge-modules/secsrv-cbor"
)
add_subdirectory(
   "${CMAKE_SOURCE_DIR}/../../build/mcc-linux-x86/mbed-edge-modules/mbed-client-esfs"
   "${CMAKE_BINARY_DIR}/mbed-edge-modules/mbed-client-esfs"
)



# And others (typically CMSIS implementations) need to export non-system header
# files. Please don't use this facility. Please. It's much, much better to fix
# implementations that import these headers to import them using the full path.
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/mbed-cloud-client/source")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/mbed-cloud-client/source/include")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/mbed-cloud-client/mbed-client-esfs/source/include")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/mbed-cloud-client/mbed-cloud-client")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/mbed-cloud-client/mbed-client")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/mbed-cloud-client/mbed-client/mbed-client-c")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/mbed-cloud-client/mbed-client/mbed-client")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/mbed-cloud-client/mbed-client/mbed-client-mbed-tls")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/mbed-cloud-client/mbed-client/mbed-client-classic")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/mbed-cloud-client/mbed-client/source")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/mbed-cloud-client/mbed-client/mbed-client-c/nsdl-c")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/mbed-cloud-client/mbed-client/mbed-client-c/source/include")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/factory-configurator-client/factory-configurator-client/factory-configurator-client")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/factory-configurator-client/factory-configurator-client/source")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/factory-configurator-client/factory-configurator-client/source/include")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/factory-configurator-client/fcc-bundle-handler/fcc-bundle-handler")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/factory-configurator-client/fcc-bundle-handler/source")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/factory-configurator-client/fcc-bundle-handler/source/include")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/factory-configurator-client/key-config-manager/key-config-manager")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/factory-configurator-client/utils/utils")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/factory-configurator-client/logger/logger")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/factory-configurator-client/storage/storage")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/factory-configurator-client/key-config-manager/source/include")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/factory-configurator-client/crypto/source/include")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/factory-configurator-client/crypto/crypto")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/factory-configurator-client/crypto-service/crypto-service")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/factory-configurator-client/crypto-service/source/include")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/factory-configurator-client/ftcd-comm-base/ftcd-comm-base")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/factory-configurator-client/ftcd-comm-socket/ftcd-comm-socket")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/factory-configurator-client/key-config-manager")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/factory-configurator-client/fcc-output-info-handler/fcc-output-info-handler")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/pal/Source/PAL-Impl/Services-API")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/pal/Source/Port/Platform-API")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/pal/Configs/pal_config")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/pal/Configs/pal_config/Linux")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/update-client-hub/modules/common")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/update-client-hub/modules/control-center")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/update-client-hub/modules/manifest-manager")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/update-client-hub/modules/atomic-queue")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/update-client-hub/modules/paal")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/update-client-hub/modules/lwm2m-mbed")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/update-client-hub/modules/pal-linux")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/update-client-hub/modules/firmware-manager")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/update-client-hub/modules/source-http-socket")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/update-client-hub/modules/device-identity")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/update-client-hub/modules/source")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/update-client-hub/modules/monitor")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/update-client-hub/modules/pal-filesystem")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/update-client-hub/modules/source-manager")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/update-client-hub/modules/source-http")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/update-client-hub/modules/pal-flashiap")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/update-client-hub/modules/pal-blockdevice")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/update-client-hub/modules/pal-target-specific")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/mbed-coap/mbed-coap")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/mbed-coap/source/include")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/nanostack-randlib/mbed-client-randlib")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/sal-stack-nanostack-eventloop/nanostack-event-loop")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/secsrv-cbor/secsrv-cbor")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/mbed-client-esfs/source/include")
include_directories("${CMAKE_SOURCE_DIR}/../../mbed-edge-module-sources/nanostack-libservice/mbed-client-libservice")


# modules with custom CMake build systems may append to the
# MBED_EDGE_BUILD_GLOBAL_INCLUDE_DIRS property to add compile-time-determined include
# directories:
get_property(GLOBAL_INCLUDE_DIRS GLOBAL PROPERTY MBED_EDGE_BUILD_GLOBAL_INCLUDE_DIRS)
include_directories(${GLOBAL_INCLUDE_DIRS})

# Provide versions of all the components we depend on, the corresponding
# preprocessor definitions are generated in mbed_edge_config.h
set(MBED_EDGE_BUILD_MBED_CLOUD_CLIENT_VERSION_STRING "0.0.1")
set(MBED_EDGE_BUILD_MBED_CLOUD_CLIENT_VERSION_MAJOR 0)
set(MBED_EDGE_BUILD_MBED_CLOUD_CLIENT_VERSION_MINOR 0)
set(MBED_EDGE_BUILD_MBED_CLOUD_CLIENT_VERSION_PATCH 1)
set(MBED_EDGE_BUILD_FACTORY_CONFIGURATOR_CLIENT_VERSION_STRING "0.0.0")
set(MBED_EDGE_BUILD_FACTORY_CONFIGURATOR_CLIENT_VERSION_MAJOR 0)
set(MBED_EDGE_BUILD_FACTORY_CONFIGURATOR_CLIENT_VERSION_MINOR 0)
set(MBED_EDGE_BUILD_FACTORY_CONFIGURATOR_CLIENT_VERSION_PATCH 0)
set(MBED_EDGE_BUILD_PAL_VERSION_STRING "1.0.0")
set(MBED_EDGE_BUILD_PAL_VERSION_MAJOR 1)
set(MBED_EDGE_BUILD_PAL_VERSION_MINOR 0)
set(MBED_EDGE_BUILD_PAL_VERSION_PATCH 0)
set(MBED_EDGE_BUILD_UPDATE_CLIENT_HUB_VERSION_STRING "0.0.0")
set(MBED_EDGE_BUILD_UPDATE_CLIENT_HUB_VERSION_MAJOR 0)
set(MBED_EDGE_BUILD_UPDATE_CLIENT_HUB_VERSION_MINOR 0)
set(MBED_EDGE_BUILD_UPDATE_CLIENT_HUB_VERSION_PATCH 0)
set(MBED_EDGE_BUILD_MBED_COAP_VERSION_STRING "4.4.0")
set(MBED_EDGE_BUILD_MBED_COAP_VERSION_MAJOR 4)
set(MBED_EDGE_BUILD_MBED_COAP_VERSION_MINOR 4)
set(MBED_EDGE_BUILD_MBED_COAP_VERSION_PATCH 0)
set(MBED_EDGE_BUILD_NANOSTACK_RANDLIB_VERSION_STRING "1.2.0")
set(MBED_EDGE_BUILD_NANOSTACK_RANDLIB_VERSION_MAJOR 1)
set(MBED_EDGE_BUILD_NANOSTACK_RANDLIB_VERSION_MINOR 2)
set(MBED_EDGE_BUILD_NANOSTACK_RANDLIB_VERSION_PATCH 0)
set(MBED_EDGE_BUILD_MBED_TRACE_VERSION_STRING "1.3.0")
set(MBED_EDGE_BUILD_MBED_TRACE_VERSION_MAJOR 1)
set(MBED_EDGE_BUILD_MBED_TRACE_VERSION_MINOR 3)
set(MBED_EDGE_BUILD_MBED_TRACE_VERSION_PATCH 0)
set(MBED_EDGE_BUILD_NS_HAL_PAL_VERSION_STRING "0.0.0")
set(MBED_EDGE_BUILD_NS_HAL_PAL_VERSION_MAJOR 0)
set(MBED_EDGE_BUILD_NS_HAL_PAL_VERSION_MINOR 0)
set(MBED_EDGE_BUILD_NS_HAL_PAL_VERSION_PATCH 0)
set(MBED_EDGE_BUILD_SAL_STACK_NANOSTACK_EVENTLOOP_VERSION_STRING "1.1.0")
set(MBED_EDGE_BUILD_SAL_STACK_NANOSTACK_EVENTLOOP_VERSION_MAJOR 1)
set(MBED_EDGE_BUILD_SAL_STACK_NANOSTACK_EVENTLOOP_VERSION_MINOR 1)
set(MBED_EDGE_BUILD_SAL_STACK_NANOSTACK_EVENTLOOP_VERSION_PATCH 0)
set(MBED_EDGE_BUILD_SECSRV_CBOR_VERSION_STRING "0.0.0")
set(MBED_EDGE_BUILD_SECSRV_CBOR_VERSION_MAJOR 0)
set(MBED_EDGE_BUILD_SECSRV_CBOR_VERSION_MINOR 0)
set(MBED_EDGE_BUILD_SECSRV_CBOR_VERSION_PATCH 0)
set(MBED_EDGE_BUILD_MBED_CLIENT_ESFS_VERSION_STRING "0.0.0")
set(MBED_EDGE_BUILD_MBED_CLIENT_ESFS_VERSION_MAJOR 0)
set(MBED_EDGE_BUILD_MBED_CLIENT_ESFS_VERSION_MINOR 0)
set(MBED_EDGE_BUILD_MBED_CLIENT_ESFS_VERSION_PATCH 0)
set(MBED_EDGE_BUILD_MBED_EDGE_INTERNAL_VERSION_STRING "0.4.5")
set(MBED_EDGE_BUILD_MBED_EDGE_INTERNAL_VERSION_MAJOR 0)
set(MBED_EDGE_BUILD_MBED_EDGE_INTERNAL_VERSION_MINOR 4)
set(MBED_EDGE_BUILD_MBED_EDGE_INTERNAL_VERSION_PATCH 5)

# provide the name of the current module so that it's available to custom CMake
# even if custom CMake does weird things with project()
set(MBED_EDGE_BUILD_MODULE_NAME mbed-edge-internal)

# delegate to an existing CMakeLists.txt:
add_subdirectory(
    "${CMAKE_SOURCE_DIR}/../.."
    "${CMAKE_SOURCE_DIR}/../../build/mcc-linux-x86/existing"
)

# make MBED_EDGE_BUILD_MODULE_NAME available as a preprocessor symbol when
# compiling this module:
target_compile_definitions(mbed-edge-internal PRIVATE "-DMBED_EDGE_BUILD_MODULE_NAME=mbed-edge-internal")

# include .cmake files provided by the target:

